{"version":3,"sources":["Configuration.js","TimerRow.js","TimerTable.js","App.js","serviceWorker.js","index.js"],"names":["Configuration","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleShowConfigs","setState","state","showConfigs","react_default","a","createElement","react_contenteditable_default","tagName","html","entry_default","className","value","startTime","format","disableClock","onChange","setStartTime","renderConfigs","renderConfigButton","name","drawInterval","onConfigChange","type","releaseInterval","callInterval","speakers","onClick","Component","TimerRow","changeName","event","target","_this$props","currentTime","callTime","drawTime","releaseTime","speakTime","_ref","clone","add","_ref2","slicedToArray","status","classname","speakerId","toString","showNames","TimerTable","newTime","moment","_this2","interval","setInterval","clearInterval","rows","i","parseInt","subtract","push","src_TimerRow","key","id","App","time","_time$split","split","_time$split2","hour","minute","now","seconds","year","month","date","handleConfigChange","defineProperty","src_Configuration","src_TimerTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4815530.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ContentEditable from 'react-contenteditable';\nimport TimePicker from 'react-time-picker';\n\nclass Configuration extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showConfigs: false\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <ContentEditable tagName=\"h1\" html={\"Extemp Timer\"} />\n        <div>\n          <div>\n            Round Begins At\n          </div>\n          <TimePicker\n            className=\"time-picker\"\n            value={this.props.startTime.format(\"HH:mm\")}\n            disableClock={true}\n            onChange={this.props.setStartTime}\n          />\n        </div>\n        {this.state.showConfigs ? this.renderConfigs() : this.renderConfigButton()}\n      </div>\n    );\n  }\n\n  renderConfigs() {\n    return (\n      <div>\n        <div className=\"configurations\">\n          <div>\n            Draw Interval\n            <br/>\n            <input name=\"drawInterval\" value={this.props.drawInterval} onChange={this.props.onConfigChange} type=\"number\" />\n          </div>\n          <div>\n            Release Interval\n            <br/>\n            <input name=\"releaseInterval\" value={this.props.releaseInterval} onChange={this.props.onConfigChange} type=\"number\" />\n          </div>\n          <div>\n            Call Interval\n            <br/>\n            <input name=\"callInterval\" value={this.props.callInterval} onChange={this.props.onConfigChange} type=\"number\" />\n          </div>\n          <div>\n            Speakers\n            <br/>\n            <input name=\"speakers\" value={this.props.speakers} onChange={this.props.onConfigChange} type=\"number\" />\n          </div>\n        </div>\n        <div>\n          <button onClick={this.toggleShowConfigs}>Done</button>\n        </div>\n      </div>\n    )\n  }\n\n  renderConfigButton() {\n    return (\n      <div>\n        <button onClick={this.toggleShowConfigs}>Configure</button>\n      </div>\n    );\n  }\n\n  toggleShowConfigs = () => {\n    this.setState(state => ({\n      showConfigs: !state.showConfigs\n    }));\n  }\n}\n\nexport default Configuration;","import React, { Component } from 'react';\nimport ContentEditable from 'react-contenteditable';\n\nclass TimerRow extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\"\n    }\n  }\n\n  render() {\n    const { currentTime, callTime, drawTime, releaseTime, speakTime } = this.props;\n    const [status, classname] = (() => {\n      return currentTime < callTime ? [\"Waiting\", \"waiting\"] :\n             currentTime < drawTime ? [\"Call to Table\", \"called\"] :\n             currentTime < drawTime.clone().add(1, 'minutes') ? [\"Draw\", \"draw\"] :\n             currentTime < releaseTime ? [\"Preparing\", \"preparing\"] :\n             currentTime < speakTime ? [\"Release\", \"released\"] :\n             currentTime < speakTime.clone().add(7, 'minutes') ? [\"Speaking\", \"speaking\"] :\n             [\"Done\", \"done\"]\n    })();\n    return (\n      <tr className={classname}>\n        <ContentEditable\n          html={this.state.name || this.props.speakerId.toString()}\n          tagName=\"td\"\n          onChange={this.changeName}\n        />\n        {this.props.showNames && <ContentEditable tagName=\"td\" html={this.state.name} onChange={this.changeName} />}\n        <td>{this.props.drawTime.format(\"hh:mm\")}</td>\n        <td>{this.props.releaseTime.format(\"hh:mm\")}</td>\n        <td>{this.props.speakTime.format(\"hh:mm\")}</td>\n        <td>{status}</td>\n      </tr>\n    )\n  }\n\n  changeName = (event) => {\n    this.setState({ name: event.target.value });\n  }\n\n}\n\nexport default TimerRow;","import React, { Component } from 'react';\nimport TimerRow from './TimerRow';\nimport moment from 'moment';\n\nclass TimerTable extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTime: moment()\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.newTime(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n\n    const rows = [];\n    for (let i = 0; i < this.props.speakers; i++) {\n      const drawTime = this.props.startTime.clone().add(i * (parseInt(this.props.drawInterval) || 0), 'minutes');\n      const speakTime = drawTime.clone().add(30, 'minutes');\n      const releaseTime = speakTime.clone().subtract(this.props.releaseInterval, 'minutes');\n      const callTime = drawTime.clone().subtract(this.props.callInterval, 'minutes');\n      rows.push(\n        <TimerRow\n          key={i}\n          currentTime={this.state.currentTime}\n          speakerId={i+1}\n          callTime={callTime}\n          drawTime={drawTime}\n          releaseTime={releaseTime}\n          speakTime={speakTime}\n          showNames={this.props.showNames}\n        />\n      );\n    }\n    return (\n      <div>\n        <div id=\"currentTime\">\n          {this.state.currentTime.format(\"hh:mm:ss A\")}\n        </div>\n        <table>\n          <thead>\n            <tr>\n              <th>Speaker</th>\n              {this.props.showNames && <th>Name</th>}\n              <th>Draw</th>\n              <th>Release</th>\n              <th>Speak</th>\n              <th>Status</th>\n            </tr>\n          </thead> \n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  newTime = () => {\n    this.setState({\n      currentTime: moment()\n    });\n  }\n}\n\nexport default TimerTable;","import React, { Component } from 'react';\nimport moment from 'moment';\nimport Configuration from './Configuration';\nimport TimerTable from './TimerTable';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTime: moment().seconds(0),\n      drawInterval: 7,\n      releaseInterval: 5,\n      callInterval: 2,\n      speakers: 7\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Configuration\n          startTime={this.state.startTime}\n          drawInterval={this.state.drawInterval}\n          releaseInterval={this.state.releaseInterval}\n          callInterval={this.state.callInterval}\n          speakers={this.state.speakers}\n          setStartTime={this.setStartTime}\n          onConfigChange={this.handleConfigChange}\n        />\n        <TimerTable\n          startTime={this.state.startTime}\n          drawInterval={this.state.drawInterval}\n          releaseInterval={this.state.releaseInterval}\n          callInterval={this.state.callInterval}\n          speakers={this.state.speakers}\n        />\n      </div>\n    );\n  }\n\n  setStartTime = (time) => {\n    const [hour, minute] = time.split(\":\")\n    const now = moment();\n    this.setState(state => ({\n      startTime: state.startTime.clone().hour(hour).minute(minute).seconds(0).year(now.year()).month(now.month()).date(now.date())\n    }))\n  }\n\n  handleConfigChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}